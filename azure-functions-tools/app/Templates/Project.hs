{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE QuasiQuotes       #-}
module Templates.Project
where

import           Data.Either.Combinators (fromRight')
import           Data.Text               (Text)
import           Templates.Utils         (toTemplate)
import           Text.Glabrous           (Template)
import qualified Text.Glabrous           as Tpl
import           Text.RawString.QQ

hostJson :: Template
hostJson = toTemplate "host.json" [r|
{
  "version": "2.0",
  "extensionBundle": {
    "id": "Microsoft.Azure.Functions.ExtensionBundle",
    "version": "[1.*, 2.0.0)"
  }
}
|]

workerConfigJson :: Template
workerConfigJson = toTemplate "worker.config.json" [r|
{
  "description": {
    "arguments": [
      "run"
    ],
    "defaultExecutablePath": "{{execPath}}",
    "extensions": [
      ".hs"
    ],
    "language": "haskell"
  }
}
|]

localSettingsJson :: Template
localSettingsJson = toTemplate "local.settings.json" [r|
{
  "IsEncrypted": false,
  "Values": {
      "AzureWebJobsStorage": "UseDevelopmentStorage=true",
      "FUNCTIONS_WORKER_RUNTIME": "haskell",
      "languageWorkers:workersDirectory": "workers",
      "ConnectionStrings": {
      }
  }
}
|]

cabalFile :: String -> Template
cabalFile name = toTemplate (name <> ".cabal") [r|cabal-version: 2.24

-- This file has been generated by Azure Functions Haskell Worker.

name:           {{name}}
version:        0.1.0.0
-- synopsis:
-- description:
build-type:     Simple

-- Do NOT remove this stanza.
-- it is used by the tooling to expose automatically generated functions.
common functions
  other-modules:

executable {{name}}
  import: functions
  default-language: Haskell2010
  main-is: Main.hs
  hs-source-dirs: src
  ghc-options: -Wall
  other-modules:
      Exports
  build-depends:
      base                      >= 4.9 && < 5
    , aeson
    , azure-functions-worker
    , bytestring
    , containers
    , text
|]

exportsHs :: Template
exportsHs = toTemplate "Exports.hs" [r|
{-# LANGUAGE OverloadedStrings #-}
module Exports
( functions
)
where

import Azure.Functions.Registry

functions :: Registry
functions = mempty
|]

mainHs :: Template
mainHs = toTemplate "Main.hs" [r|
module Main where

import           Azure.Functions.Worker
import qualified Exports as Exports

main :: IO ()
main = runWorker (Exports.functions)
|]

dockerfile :: Template
dockerfile = toTemplate "Dockerfile" [r|
# syntax=docker/dockerfile:experimental
FROM quay.io/haskell_works/ghc-8.6.5 as build-image

RUN apt-get update \
    && apt-get install -y protobuf-compiler

WORKDIR /src
COPY . /src

RUN --mount=type=cache,target=/root/.cabal \
    ["cabal", "update"]

RUN --mount=type=cache,target=/root/.cabal \
    ["cabal", "build"]

RUN --mount=type=cache,target=/root/.cabal \
    ["cabal", "run", "exe:{{name}}", "--", "init", "--script-root", "/home/site/wwwroot"]


FROM mcr.microsoft.com/azure-functions/base:2.0 as runtime-image

FROM mcr.microsoft.com/dotnet/core/runtime-deps:2.2

ENV AzureWebJobsScriptRoot=/home/site/wwwroot \
    HOME=/home \
    FUNCTIONS_WORKER_RUNTIME=haskell \
    languageWorkers__workersDirectory=/home/site/wwwroot/workers

# Copy the Azure Functions host from the runtime image
COPY --from=runtime-image [ "/azure-functions-host", "/azure-functions-host" ]

# Copy the script root contents from the build image
COPY --from=build-image ["/home/site/wwwroot", "/home/site/wwwroot"]

WORKDIR /home/site/wwwroot
CMD [ "/azure-functions-host/Microsoft.Azure.WebJobs.Script.WebHost" ]
|]

dockerignore :: Template
dockerignore = toTemplate ".dockerignore" [r|
dist/
dist-newstyle/
.git/
.vscode/
.circleci/
.dockerignore
.Dockerfile
|]

